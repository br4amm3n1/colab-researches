# -*- coding: utf-8 -*-
"""prac15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17Y_zwohuKp5LUrYlF1BQvQ67DFNYts9R
"""

import pandas as pd

df_pokemon = pd.read_csv('pokemon.csv')
df_pokemon = df_pokemon.dropna()

pokemon_speed = list(df_pokemon['speed'].copy())

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 5))
plt.title('График распределения скорости каждого покемона')
plt.plot(pokemon_speed)
plt.show()

import numpy as np

data_stream_1 = pokemon_speed[:100]
data_stream_2 = pokemon_speed[100:200]
data_stream_3 = pokemon_speed[200:]

for i in range(len(data_stream_2)):
  data_stream_2[i] += 400

for i in range(len(data_stream_3)):
  data_stream_3[i] += 150

data_stream_abrupt_drift = data_stream_1 + data_stream_2 + data_stream_3
plt.figure(figsize=(10, 5))
plt.title('Имитация изменения распределения (с резким дрейфом)')
plt.plot(data_stream_abrupt_drift)
plt.show()

print(data_stream_abrupt_drift)

!pip install -U scikit-multiflow

from skmultiflow.drift_detection import ADWIN

adwin = ADWIN(delta=1)
indexes_detection_points_ADWIN = []

for i in range(len(data_stream_abrupt_drift)):
  adwin.add_element(data_stream_abrupt_drift[i])

  if adwin.detected_change():
    indexes_detection_points_ADWIN.append(i)
    print('Change detected in data: ' + str(data_stream_abrupt_drift[i]) + ' - at index: ' + str(i))

plt.figure(figsize=(10, 5))
plt.title('Точки дрейфа, определенные алгоритмом ADWIN')
plt.plot(data_stream_abrupt_drift, '-bo', markevery=indexes_detection_points_ADWIN, mfc='red', mec='red', label='line with points detection drift')
plt.legend()
plt.show()

from sklearn.model_selection import train_test_split

df_pokemon = pd.read_csv('pokemon.csv')
df_pokemon = df_pokemon.dropna()

df_pokemon_modified = df_pokemon[['speed', 'type1']].copy()

df_pokemon_modified['type1'] = df_pokemon_modified['type1'].replace(['grass', 'fire',
                                                                     'water', 'bug', 'normal',
                                                                     'poison', 'electric', 'ground',
                                                                     'fairy', 'fighting', 'psychic',
                                                                     'rock', 'ghost', 'ice',
                                                                     'dragon', 'dark', 'steel',
                                                                     'flying'], [0, 1, 2, 3, 4, 5, 6,
                                                                                 7, 8, 9, 10, 11, 12,
                                                                                 13, 14, 15, 16, 17])

X = df_pokemon_modified.drop(columns='type1')
y = df_pokemon_modified['type1']

X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size = 0.6, random_state = 0)
Y_test

from sklearn.tree import DecisionTreeClassifier

dtc = DecisionTreeClassifier(max_depth=12)
dtc = dtc.fit(X_train, Y_train)

indexes = X_test.index. tolist ()

counter = 0
for x in indexes:
  counter += 1
  if counter > 101:
    X_test['speed'][x] += 75

Y_pred = dtc.predict(X_test)
Y_test_temp = np.array(Y_test)
print(Y_pred)
print(Y_test_temp)

data_stream_DDM = []

for i in range(len(Y_pred)):
  if Y_pred[i] == Y_test_temp[i]:
    data_stream_DDM.append(1)
  else:
    data_stream_DDM.append(0)

print(data_stream_DDM)

from skmultiflow.drift_detection import DDM

ddm = DDM()
indexes_detection_points_DDM = []

for i in range(len(data_stream_DDM)):
  ddm.add_element(data_stream_DDM[i])
  if ddm.detected_warning_zone():
    print('Warning zone has been detected in data: ' + str(data_stream_DDM[i]) + ' - of index: ' + str(i))
  if ddm.detected_change():
    indexes_detection_points_DDM.append(i)
    print('Change has been detected in data: ' + str(data_stream_DDM[i]) + ' - of index: ' + str(i))

plt.figure(figsize=(10, 5))
plt.title('Измененное распределение скорости покемонов для тестовой выборки')
plt.plot(np.array(X_test))
plt.show()

plt.figure(figsize=(10, 5))
plt.title('Точки дрейфа, определенные алгоритмом DDM')
plt.plot(np.array(X_test), '-bo', markevery=indexes_detection_points_DDM, mfc='red', mec='red', label='line with points detection drift')
plt.legend()
plt.show()